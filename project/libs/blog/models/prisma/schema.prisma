// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev \
// --name "Added model for Post" \
// --schema ./prisma/schema.prisma \
// --skip-generate

generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////// POSTS ////////////////////
enum PostType {
  text
  link
  quote
  video
  photo
}

//////////////////// POSTS & EXTRA-FIELDS RELATIONS ////////////////////
model PostToExtraFields {
  id              String @id @default(uuid())
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  postId          String @unique @db.VarChar(255) @map("post_id")
  postType        String @map("post_type") // Таблицу, из которой нужно получить экстра-филды, определяем по типу поста
  extraFieldsId   String @map("extra_fields_id") // Через данное поле будем вручную получать экстра-филды

  // --- Отношения
  post Post @relation(fields: [postId], references: [id]) // Связываем с таблицей Post через внутреннее поле postId

  @@map("posts_to_extra_fields")
}

model Post {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  publishedAt     DateTime @default(now()) @map("published_at")

  type            PostType
  isPublished     Boolean  @map("is_published")
  isRepost        Boolean  @map("is_repost")
  authorId        String   @map("author_id")
  originAuthorId  String   @map("origin_author_id")
  originPostId    String   @map("origin_post_id")

  // --- Отношения
  tags            PostTag[]
  comments        PostComment[]
  likes           PostLike[]

  // Связь с таблицей отношений постов и экстра-полей
  extraFields PostToExtraFields[]

  @@map("posts")
}

//////////////////// TAGS ////////////////////
model PostTag {
  id        String    @id @default(uuid())
  posts     Post[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name     String    @unique() @db.VarChar(10)

  @@map("posts_tags")
}

//////////////////// COMMENTS ////////////////////
model PostComment {
  id        String   @id @default(uuid())
  postId    String   @map("postId")
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  text      String   @db.VarChar(300)

  // --- Отношения
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("posts_comments")
}

//////////////////// LIKES ////////////////////
model PostLike {
  id        String  @id @default(uuid())
  postId    String  @map("postId")
  authorId  String  @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // --- Отношения
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("posts_likes")
}

model TextPost {
  id        String @id @default(uuid())
  announce  String
  title     String @db.VarChar(255)
  text      String

  @@index([title])
  @@map("text_posts")
}

model LinkPost {
  id          String @id @default(uuid())
  linkURL     String @map("link_url")
  description String @db.VarChar(300)

  @@map("link_posts")
}

model QuotePost {
  id        String @id @default(uuid())
  authorId  String @map("author_id")
  text      String @db.VarChar(300)

  @@map("quote_posts")
}

model VideoPost {
  id        String @id @default(uuid())
  title     String @db.VarChar(50)
  videoURL  String @map("video_url")

  @@index([title])
  @@map("video_posts")
}

model PhotoPost {
  id        String @id @default(uuid())
  photoURL  String @map("photo_url")

  @@map("photo_posts")
}
